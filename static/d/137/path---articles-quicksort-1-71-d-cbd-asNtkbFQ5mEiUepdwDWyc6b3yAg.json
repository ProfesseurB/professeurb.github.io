{"data":{"mdx":{"id":"60e513c8-77bb-58c0-abe1-bcc6848793d3","frontmatter":{"title":"Le Problème avec QuickSort, partie 1","subtitle":"Où l'on explore quelques éléments délicats concernant QuickSort…","tags":["Tris","IPT Spé"]},"fields":{"slug":"/articles/quicksort_1/"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Le Problème avec QuickSort, partie 1\",\n  \"subtitle\": \"Où l'on explore quelques éléments délicats concernant QuickSort…\",\n  \"tags\": [\"Tris\", \"IPT Spé\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"L'algorithme de \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://fr.wikipedia.org/wiki/Tri_rapide\"\n  }), \"tri rapide\"), \", ou \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Quicksort\"\n  }), \"Quicksort\"), \", figure au programme d'\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Informatique pour tous\"), \", le cours commun d'informatique des classes pr\\xE9paratoires scientifiques en deuxi\\xE8me ann\\xE9e. Or, pour ce cours, le langage de r\\xE9f\\xE9rence est Python\\u2026 et c'est vraiment difficile de bien montrer \\xE0 quel point cet algorithme est int\\xE9ressant.\"), mdx(\"h1\", null, \"Pr\\xE9sentation du probl\\xE8me\"), mdx(\"p\", null, \"L'id\\xE9e de base de Quicksort est tr\\xE8s simple\", \"\\xA0\", \": pour trier une liste \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"l\"), \", il suffit de prendre un \\xE9l\\xE9ment \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"p\"), \" de la liste (que l'on appelle le \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pivot\"), \"), s\\xE9lectionner les \\xE9l\\xE9ments de \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"l\"), \" plus petits que \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"p\"), \" et les trier, s\\xE9lectionner ceux qui sont plus grands et les trier\\u2026 et tout remettre dans l'ordre.\"), mdx(\"p\", null, \"Ainsi, pour trier la liste \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"l = [\", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"7\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"9\"), \", \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"]\"), \", on d\\xE9finit\\nle pivot comme le premier \\xE9l\\xE9ment de la liste\", \"\\xA0\", \": \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"p = \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3\")), \" et on s\\xE9pare le reste en deux sous-listes\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), \"plus_petit = [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"2\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"]\\nplus_grand = [\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"7\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"8\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"9\"), \"]\\n\")), mdx(\"p\", null, \"Ensuite, on trie \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"plus_petit\"), \" et \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"plus_grand\"), \" et on retourne la liste\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), \"plus_petit_trie + [pivot] + plus_grand_trie\\n\")), mdx(\"p\", null, \"Comment fait-on pour trier les sous-listes\", \"\\xA0\", \"? En rappelant l'algorithme, sachant qu'une liste de longueur\", \"\\xA0\", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\")), \" est d\\xE9j\\xE0 tri\\xE9e.\"), mdx(\"p\", null, \"Cela donne l'algorithme suivant\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"pseudo_quicksort\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(l)\"), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" len(l) <= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" l \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# la liste est d\\xE9j\\xE0 tri\\xE9e\"), \"\\n    pivot = l[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"]\\n    plus_petit = []\\n    plus_grand = []\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" e \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" l[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":]:\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" e <= pivot:\\n            plus_petit.append(e)\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \":\\n            plus_grand.append(e)\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" pseudo_quicksort(plus_petit) \\\\\\\\\\n        + [pivot] + pseudo_quicksort(plus_grand)\\n\")), mdx(\"p\", null, \"Quel est le probl\\xE8me\", \"\\xA0\", \"? Cet algorithme est correct, il trie bien une liste, est plut\\xF4t rapide et respecte l'id\\xE9e derri\\xE8re Quicksort. Mais c'est une version tr\\xE8s na\\xEFve et d\\xE9natur\\xE9e de Quicksort. On a le \\xAB\", \"\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sort\"), \"\\xA0\", \"\\xBB, mais pas vraiment le \\xAB\", \"\\xA0\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"quick\"), \"\\xA0\", \"\\xBB. En particulier, cette fonction passe son temps \\xE0 dupliquer des donn\\xE9es, \\xE0 cr\\xE9er de nouvelles listes, etc., ce que ne fait pas le \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"v\\xE9ritable\"), \" algorithme Quicksort.\"), mdx(\"p\", null, \"Au contraire, le \\xAB\", \"\\xA0\", \"vrai\", \"\\xA0\", \"\\xBB Quicksort effectue un tri \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"en place\"), \" (c.\\xE0.d. il modifie le tableau plut\\xF4t que d'en cr\\xE9er un nouveau) et la seule m\\xE9moire suppl\\xE9mentaire qu'il utilise est pour la pile d'appel lors de la r\\xE9cursion (de taille logarithmique par rapport \\xE0 la taille de liste, donc quasiment n\\xE9gligeable). Et il est vraiment tr\\xE8s rapide.\"), mdx(\"p\", null, \"Dans la version originale de Hoare, on a deux pointeurs qui se d\\xE9placent, l'un \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"i\"), \" de gauche \\xE0 droite en s'assurant que les \\xE9l\\xE9ments le pr\\xE9c\\xE9dant sont plus petits que le pivot, et un autre \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"j\"), \" de droite \\xE0 gauche avec tous les \\xE9l\\xE9ments le suivant strictement plus grands que le pivot\", \"\\xA0\", \":\"), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(Figure, {\n    mdxType: \"Figure\"\n  })), mdx(\"p\", null, \"Quel est le probl\\xE8me, donc\", \"\\xA0\", \"? C'est qu'il est assez difficile de montrer que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bonne\"), \" version est vraiment meilleure que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mauvaise\"), \" en Python, puisque que le code de la fonction \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"pseudo_quicksort\"), \" ci-dessus est plus rapide que le code \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"propre\"), \" (et tr\\xE8s comment\\xE9, peut-\\xEAtre un peu trop, mais les invariants de boucles permettent de v\\xE9rifier facilement la correction de l'impl\\xE9mentation) de Quicksort\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"quicksort\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(l)\"), \":\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"def\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"aux\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(debut, fin)\"), \" :\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Si debut <= fin + 1, la liste est de longueur au plus 1,\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# elle est d\\xE9j\\xE0 tri\\xE9e.\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" fin <= debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On choisit le pivot,\"), \"\\n        pivot = l[debut]\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Puis on va partager le reste de la liste\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# par rapport \\xE0 ce pivot.\"), \"\\n        i = debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n        j = fin - \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"True\"), \":\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Invariant de boucle\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. debut < i, j < fin et i <= j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. si debut < k < i alors l[k] <= pivot\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 3. si j < k < fin alors pivot <= l[k]\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" i <= j \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"and\"), \" l[i] <= pivot:\\n                i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# en sortie de boucle, on a soit\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. i == j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. soit i <= j et l[i] > pivot\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" i <= j \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"and\"), \" l[j] > pivot:\\n                j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# de m\\xEAme, en sortie de boucle, on a soit\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. i == j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. soit i <= j et l[j] <= pivot\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# En conclusion, deux cas sont possibles ici :\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. i == j + 1\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. i <= j et l[j] <= pivot < l[i]\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Dans le premier cas, on a fini de trier\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (i > j):\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# Sinon, on a donc l[j] <= pivot < l[i]\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"#   et donc i < j\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On \\xE9change les deux \\xE9l\\xE9ments :\"), \"\\n            l[i], l[j] = l[j], l[i]\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# et on continue\"), \"\\n            i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n            j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On a maintenant\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 1. i == j + 1\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 2. debut < k <= j => l[k] <= pivot\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# 3. i <= k < fin => l[k] > pivot\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# On mets le pivot \\xE0 sa place\"), \"\\n        l[debut], l[j] = l[j], l[debut]\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"# et on trie les deux c\\xF4t\\xE9s s\\xE9par\\xE9ment.\"), \"\\n        aux(debut, j)\\n        aux(i, fin)\\n    aux(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \", len(l))\\n\")), mdx(\"h1\", null, \"V\\xE9rification du probl\\xE8me\"), mdx(\"p\", null, \"Pour v\\xE9rifier que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mauvaise\"), \" version est plus rapide que la \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"bonne\"), \", comparons les temps avec la fonction \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"timeit\"), \".\"), mdx(\"p\", null, \"Pour cela, cr\\xE9\\xE9ons tout d'abord la liste \\xE0 trier, constitu\\xE9e de \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\")), \" entiers choisis al\\xE9atoirement entre \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\")), \" et \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\")), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \">>> \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" random\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \">>> \"), \"l = [random.randint(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \", \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \") \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" i \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" range(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1000\"), \")]\\n\")), mdx(\"p\", null, \"Nous allons maintenant chronom\\xE9trer le temps mis pour faire 100 fois le tri de \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"l\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-python\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \">>> \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"import\"), \" timeit\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \">>> \"), \"timeit.timeit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"pseudo_quicksort(ll)\\\"\"), \", \\\\\\\\\\n      setup=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"from __main__ import pseudo_quicksort, l; ll = l[:]\\\"\"), \", \\\\\\\\\\n      number=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \")\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.16471761098364368\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-meta\"\n  }), \">>> \"), \"timeit.timeit(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"quicksort(ll)\\\"\"), \", \\\\\\\\\\n      setup=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"\\\"from __main__ import quicksort, l; ll = l[:]\\\"\"), \", \\\\\\\\\\n      number=\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \")\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"3.079240838007536\"), \"\\n\")), mdx(\"p\", null, \"Clairement, \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"pseudo-quicksort\"), \" est plus rapide, il mets 164\", \"\\xA0\", \"ms \\xE0 s'ex\\xE9cuter alors que \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"quicksort\"), \" mets plus de 3 secondes.\"), mdx(\"p\", null, \"La raison est la suivante\", \"\\xA0\", \": la boucle sur la liste (\", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" e \", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" l[\", mdx(\"span\", _extends({\n    parentName: \"inlineCode\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \":]\"), \") et les concat\\xE9nations de listes sont tr\\xE8s rapides, elles sont ex\\xE9cut\\xE9es directement \\xE0 partir de code pr\\xE9-compil\\xE9 et optimis\\xE9. \\xC0 l'inverse, dans \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"quicksort\"), \", tout est fait \\xE0 la main.\"), mdx(\"h1\", null, \"Un autre comparatif\"), mdx(\"p\", null, \"Pour comparer les temps d'ex\\xE9cutions avec une impl\\xE9mentation plus s\\xE9rieuse, nous allons refaire la m\\xEAme exp\\xE9rience en langage C++. Voici tout d'abord le code de \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"pseudo_quicksort\"), \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-c++\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> pseudo_quicksort(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> l) {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (l.size() <= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \") {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" l;\\n  }\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" pivot = l[\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \"];\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> plus_petit, plus_grand;\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"for\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"auto\"), \" it = l.begin() + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" ; it != l.end(); ++it) {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (*it <= pivot) {\\n      plus_petit.push_back(*it);\\n    } \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"else\"), \" {\\n      plus_grand.push_back(*it);\\n    }\\n  }\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// On trie plus_petit et plus_grand\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> r = pseudo_quicksort(plus_petit);\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> r2 = pseudo_quicksort(plus_grand);\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// On reconstruit le r\\xE9sultat final...\"), \"\\n  r.push_back(pivot);\\n  r.insert(r.end(), r2.begin(), r2.end());\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// ... avant de le renvoyer.\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \" r;\\n}\\n\")), mdx(\"p\", null, \"Voici maintenant le code de \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"quicksort\"), \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-c++\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"quicksort_aux\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" l[], \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" debut, \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" fin)\"), \" \"), \"{\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (fin <= debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \")\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"return\"), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" pivot = l[debut];\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" i = debut + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \", j = fin - \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"true\"), \") {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" (i <= j && l[i] <= pivot) {\\n      i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n    }\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"while\"), \" (i <= j && l[j] > pivot) {\\n      j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n    }\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"if\"), \" (i > j) {\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"break\"), \";\\n    }\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" tmp = l[i];\\n    l[i] = l[j];\\n    l[j] = tmp;\\n    i += \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n    j -= \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \";\\n  }\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \" tmp = l[debut];\\n  l[debut] = l[j];\\n  l[j] = tmp;\\n  quicksort_aux(l, debut, j);\\n  quicksort_aux(l, i, fin);\\n}\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"void\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-title\"\n  }), \"quicksort\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"std\"), \"::\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"vector\"), \"<\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"int\"), \"> l)\"), \" \"), \"{\\n  quicksort_aux(l.data(), \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \", l.size());\\n}\\n\")), mdx(\"p\", null, \"Les deux sont une traduction directe du code Python pr\\xE9c\\xE9dent. En triant une liste de 1000000 entiers, j'obtiens le r\\xE9sultat suivant\", \"\\xA0\", \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-angelscript\"\n  }), \"clock resolution: mean \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"is\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"47.536\"), \" ns (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"10240002\"), \" iterations)\\n\\nbenchmarking pseudo_quicksort\\ncollecting \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" iterations each, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" estimated \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"85.2807\"), \" s\\nmean: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"854.245\"), \" ms, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"847.087\"), \" ms, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"862.863\"), \" ms, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nstd dev: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"39.8463\"), \" ms, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"33.4953\"), \" ms, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"50.2214\"), \" ms, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nfound \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \" outliers among \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"5\"), \"%)\\nvariance \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"is\"), \" moderately inflated by outliers\\n\\nbenchmarking quicksort\\ncollecting \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" iterations each, \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"in\"), \" estimated \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"626.126\"), \" ms\\nmean: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6.3364\"), \" ms, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6.26806\"), \" ms, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"6.42072\"), \" ms, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nstd dev: \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"386.494\"), \" \\u03BCs, lb \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"322.376\"), \" \\u03BCs, ub \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"493.992\"), \" \\u03BCs, ci \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0.95\"), \"\\nfound \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \" outliers among \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"100\"), \" samples (\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"4\"), \"%)\\nvariance \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"is\"), \" severely inflated by outliers\\n\")), mdx(\"p\", null, \"Ce que l'on peut y lire, c'est que la version \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"quicksort\"), \" mets en moyenne 6.3364\", \"\\xA0\", \"ms alors que la version \", mdx(\"inlineCode\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"hljs language-py inlinecode\"\n  }), \"pseudo_quicksort\"), \" mets quand \\xE0 elle... 854.245\", \"\\xA0\", \"ms.\"), mdx(\"p\", null, \"Que dire de plus\", \"\\xA0\", \"? Qu'il existe d'autres probl\\xE8mes tr\\xE8s int\\xE9ressant concernant l'efficacit\\xE9 de Quicksort, que nous d\\xE9velopperons dans un \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../quicksort_2\"\n  }), \"prochain article\"), \".\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"60e513c8-77bb-58c0-abe1-bcc6848793d3"}}